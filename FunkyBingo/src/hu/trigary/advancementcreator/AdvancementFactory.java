package hu.trigary.advancementcreator;

import hu.trigary.advancementcreator.shared.*;
import hu.trigary.advancementcreator.trigger.*;
import hu.trigary.advancementcreator.util.Validator;
import net.md_5.bungee.api.chat.TextComponent;
import org.apache.commons.lang.Validate;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.entity.EntityType;
import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.Nullable;

import java.util.Arrays;
import java.util.function.Function;

/**
 * A class containing methods which should drastically speed up the creation of the common advancements.
 * Also offers auto-activation.
 */
public class AdvancementFactory {
	private final Plugin plugin;
	private final boolean autoActivate;
	private final boolean autoReload;
	
	/**
	 * @param plugin the advancements' ids will be created in this plugin's namespace
	 * @param autoActivate whether the advancement should be automatically activated directly after creation
	 * @param autoReload whether {@link Bukkit#reloadData()} should be called immediately after an advancement has been created.
	 * {@code autoActivate} mustn't be false if this is true
	 */
	public AdvancementFactory(Plugin plugin, boolean autoActivate, boolean autoReload) {
		Validate.isTrue(!(!autoActivate && autoReload), "Auto reload doesn't't work without auto activation.");
		this.plugin = plugin;
		this.autoActivate = autoActivate;
		this.autoReload = autoReload;
	}
	
	
	
	/**
	 * Creates a new {@link Advancement} with the specified contents and possibly activates it
	 * (and possibly calls {@link Bukkit#reloadData()}) depending on the parameters passed in the constructor.
	 *
	 * @param id the id of the advancement, without namespace
	 * @param parent the parent advancement, can be null. {@link #getRoot(String, String, String, Material, String)} may be more suitable for root advancements
	 * @param title the title of the advancement
	 * @param description the description of the advancement
	 * @param icon the icon of the advancement
	 * @param triggerId the id of the trigger
	 * @param trigger the trigger of the advancement
	 * @return the created advancement
	 */
	public Advancement getSimple(String id, @Nullable Advancement parent, String title, String description, Material icon, String triggerId, Trigger trigger) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon),
				new TextComponent(title), new TextComponent(description))
				.addTrigger(triggerId, trigger);
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * Similar to {@link #getSimple(String, Advancement, String, String, Material, String, Trigger)}, but this method adds multiple triggers,
	 * all of which must be completed in order to complete the advancement. The triggers are generated by iterating over the {@code contents} array
	 * and calling the {@code triggerCreator} function.
	 */
	public <T> Advancement getAll(String id, @Nullable Advancement parent, String title, String description, Material icon,
			T[] contents, Function<T, Trigger> triggerCreator) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon),
				new TextComponent(title), new TextComponent(description));
		for (int i = 0; i < contents.length; i++) {
			advancement.addTrigger(String.valueOf(i), triggerCreator.apply(contents[i]));
		}
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * Similar to {@link #getSimple(String, Advancement, String, String, Material, String, Trigger)}, but this method adds multiple triggers,
	 * only one of which must be completed in order to complete the advancement. The triggers are generated by iterating over the {@code contents} array
	 * and calling the {@code triggerCreator} function.
	 */
	public <T> Advancement getAny(String id, @Nullable Advancement parent, String title, String description, Material icon,
			T[] contents, Function<T, Trigger> triggerCreator) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon),
				new TextComponent(title), new TextComponent(description));
		String[] requirements = new String[contents.length];
		for (int i = 0; i < contents.length; i++) {
			String index = String.valueOf(i);
			requirements[i] = index;
			advancement.addTrigger(index, triggerCreator.apply(contents[i]));
		}
		advancement.addRequirement(requirements);
		finalize(advancement, parent);
		return advancement;
	}
	
	
	
	/**
	 * Similar to {@link #getSimple(String, Advancement, String, String, Material, String, Trigger)}, but this method creates
	 * an advancement which is automatically unlocked and has the specified background.
	 */
	public Advancement getRoot(String id, String title, String description, Material icon, String background) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon),
				new TextComponent(title), new TextComponent(description))
				.makeRoot(background, true);
		finalize(advancement, null);
		return advancement;
	}
	
	/**
	 * Similar to {@link #getRoot(String, String, String, Material, String)}, but this method creates a child advancement (which is also automatically unlocked).
	 */
	public Advancement getEmpty(String id, @Nullable Advancement parent, String title, String description, Material icon) {
		validate(id, title, description, icon);
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon),
				new TextComponent(title), new TextComponent(description))
				.addTrigger("auto", new LocationTrigger())
				.setAnnounce(false)
				.setToast(false);
		finalize(advancement, parent);
		return advancement;
	}
	
	
	
	/**
	 * This method creates an advancement which has multiple impossible triggers with the specified trigger ids.
	 *
	 * @see #getSimple(String, Advancement, String, String, Material, String, Trigger)
	 */
	public Advancement getImpossible(String id, @Nullable Advancement parent, String title, String description, Material icon, String... triggers) {
		validate(id, title, description, icon);
		Validate.notNull(triggers);
		Validate.isTrue(triggers.length > 0, "At least one trigger must be specified.");
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon),
				new TextComponent(title), new TextComponent(description));
		for (String trigger : triggers) {
			advancement.addTrigger(trigger, new ImpossibleTrigger());
		}
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * Similar to {@link #getImpossible(String, Advancement, String, String, Material, String...)}, but this method
	 * only adds a single trigger with the id "0".
	 */
	public Advancement getImpossible(String id, @Nullable Advancement parent, String title, String description, Material icon) {
		return getImpossible(id, parent, title, description, icon, "0");
	}
	
	/**
	 * Similar to {@link #getImpossible(String, Advancement, String, String, Material, String...)}, but this method
	 * adds specified amount of triggers, with the ids starting with "0" and ending with the string value of {@code triggerCount - 1}
	 */
	public Advancement getCountedImpossible(String id, @Nullable Advancement parent, String title, String description, Material icon, int triggerCount) {
		validate(id, title, description, icon);
		Validate.isTrue(triggerCount > 0, "There must be at least one trigger.");
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), new ItemObject().setItem(icon),
				new TextComponent(title), new TextComponent(description));
		for (int i = 0; i < triggerCount; i++) {
			advancement.addTrigger(String.valueOf(i), new ImpossibleTrigger());
		}
		finalize(advancement, parent);
		return advancement;
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player gets the specified item in his inventory.
	 * @see #getSimple(String, Advancement, String, String, Material, String, Trigger)
	 */
	public Advancement getItem(String id, @Nullable Advancement parent, String title, String description, Material item, Integer minCount) {
		return getSimple(id, parent, title, description, item, "item", new InventoryChangedTrigger()
				.addItem(new ItemObject().setItem(item).setCount(new RangeObject().setMin(minCount))));
	}
	
	/**
	 * @see #getItem(String, Advancement, String, String, Material, Integer)
	 */
	public Advancement getItem(String id, @Nullable Advancement parent, String title, String description, Material item) {
		return getItem(id, parent, title, description, item, null);
	}
	
	/**
	 * @see #getItem(String, Advancement, String, String, Material, Integer)
	 * @see #getAll(String, Advancement, String, String, Material, Object[], Function)
	 */
	public Advancement getAllItems(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAll(id, parent, title, description, items[0].getItem(), items, item -> new InventoryChangedTrigger().addItem(item));
	}
	
	/**
	 * @see #getAllItems(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getAllItems(String id, @Nullable Advancement parent, String title, String description, Material... items) {
		return getAllItems(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * This method creates an advancement which is completed when the player gets all of the specified items simultaneously in his inventory.
	 * @see #getItem(String, Advancement, String, String, Material, Integer)
	 */
	public Advancement getAllItemsOnce(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		validate(id, title, description, items[0].getItem());
		Advancement advancement = new Advancement(new NamespacedKey(plugin, id), items[0], new TextComponent(title), new TextComponent(description));
		InventoryChangedTrigger trigger = new InventoryChangedTrigger();
		for (ItemObject item : items) {
			Validate.notNull(item);
			trigger.addItem(item);
		}
		advancement.addTrigger("items", trigger);
		finalize(advancement, parent);
		return advancement;
	}
	
	/**
	 * @see #getAllItemsOnce(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getAllItemsOnce(String id, @Nullable Advancement parent, String title, String description, Material... items) {
		return getAllItemsOnce(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * @see #getItem(String, Advancement, String, String, Material, Integer)
	 * @see #getAny(String, Advancement, String, String, Material, Object[], Function)
	 */
	public Advancement getAnyItem(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAny(id, parent, title, description, items[0].getItem(), items, item -> new InventoryChangedTrigger().addItem(item));
	}
	
	/**
	 * @see #getAnyItem(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getAnyItem(String id, @Nullable Advancement parent, String title, String description, Material... items) {
		return getAnyItem(id, parent, title, description, toItemObjects(items));
	}
	
	
	
	
	/**
	 * This method creates an advancement which is completed when the player placed the specified block.
	 * @see #getSimple(String, Advancement, String, String, Material, String, Trigger)
	 */
	public Advancement getPlacedBlock(String id, @Nullable Advancement parent, String title, String description, Material icon, Material block) {
		return getSimple(id, parent, title, description, icon, "place", new PlacedBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getPlacedBlock(String, Advancement, String, String, Material, Material)
	 */
	public Advancement getPlacedBlock(String id, @Nullable Advancement parent, String title, String description, Material block) {
		return getPlacedBlock(id, parent, title, description, block, block);
	}
	
	/**
	 * @see #getPlacedBlock(String, Advancement, String, String, Material, Material)
	 * @see #getAny(String, Advancement, String, String, Material, Object[], Function)
	 */
	public Advancement getPlaceAnyBlock(String id, @Nullable Advancement parent, String title, String description, Material icon, Material... blocks) {
		validate(blocks);
		return getAny(id, parent, title, description, icon, blocks, block -> new PlacedBlockTrigger().setBlock(new BlockObject(block)));
	}
	
	/**
	 * @see #getPlaceAnyBlock(String, Advancement, String, String, Material, Material...)
	 */
	public Advancement getPlaceAnyBlock(String id, @Nullable Advancement parent, String title, String description, Material... blocks) {
		validate(blocks);
		return getPlaceAnyBlock(id, parent, title, description, blocks[0], blocks);
	}
	
	
	
	/**
	 * This method creates an advancement which is completed when the player places (a block is created) the specifies item.
	 * @see #getSimple(String, Advancement, String, String, Material, String, Trigger)
	 */
	public Advancement getPlaceItem(String id, @Nullable Advancement parent, String title, String description, Material item) {
		return getSimple(id, parent, title, description, item, "place", new PlacedBlockTrigger().setItem(new ItemObject().setItem(item)));
	}
	
	/**
	 * @see #getPlaceItem(String, Advancement, String, String, Material)
	 * @see #getAll(String, Advancement, String, String, Material, Object[], Function)
	 */
	public Advancement getPlaceAllItems(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAll(id, parent, title, description, items[0].getItem(), items, item -> new PlacedBlockTrigger().setItem(item));
	}
	
	/**
	 * @see #getPlaceAllItems(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getPlaceAllItems(String id, @Nullable Advancement parent, String title, String description, Material... items) {
		return getPlaceAllItems(id, parent, title, description, toItemObjects(items));
	}
	
	/**
	 * @see #getPlaceItem(String, Advancement, String, String, Material)
	 * @see #getAny(String, Advancement, String, String, Material, Object[], Function)
	 */
	public Advancement getPlaceAnyItem(String id, @Nullable Advancement parent, String title, String description, ItemObject... items) {
		validate(items);
		return getAny(id, parent, title, description, items[0].getItem(), items, item -> new PlacedBlockTrigger().setItem(item));
	}
	
	/**
	 * @see #getPlaceAnyItem(String, Advancement, String, String, ItemObject...)
	 */
	public Advancement getPlaceAnyItem(String id, @Nullable Advancement parent, String title, String description, Material... items) {
		return getPlaceAnyItem(id, parent, title, description, toItemObjects(items));
	}
	
	
	
	
	/**
	 * This method creates an advancement which is completed when the player kills the specified mob.
	 * @see #getSimple(String, Advancement, String, String, Material, String, Trigger)
	 */
	public Advancement getKill(String id, @Nullable Advancement parent, String title, String description, Material icon, EntityType mob) {
		Validate.notNull(mob);
		return getSimple(id, parent, title, description, icon, "kill",
				new PlayerKilledEntityTrigger().setDeath(new DeathObject().setEntity(new EntityObject().setType(mob))));
	}
	
	/**
	 * @see #getKill(String, Advancement, String, String, Material, EntityType)
	 * @see #getAll(String, Advancement, String, String, Material, Object[], Function)
	 */
	public Advancement getAllKills(String id, @Nullable Advancement parent, String title, String description, Material icon, EntityType... mobs) {
		validate(mobs);
		return getAll(id, parent, title, description, icon, mobs,
				mob -> new PlayerKilledEntityTrigger().setDeath(new DeathObject().setEntity(new EntityObject().setType(mob))));
	}
	
	/**
	 * @see #getKill(String, Advancement, String, String, Material, EntityType)
	 * @see #getAny(String, Advancement, String, String, Material, Object[], Function)
	 */
	public Advancement getAnyKill(String id, @Nullable Advancement parent, String title, String description, Material icon, EntityType... mobs) {
		validate(mobs);
		return getAny(id, parent, title, description, icon, mobs,
				mob -> new PlayerKilledEntityTrigger().setDeath(new DeathObject().setEntity(new EntityObject().setType(mob))));
	}
	
	
	
	
	private static void validate(String id, String title, String description, Material icon) {
		Validator.noNamespace(id);
		Validate.notNull(title);
		Validate.notNull(description);
		Validate.notNull(icon);
	}
	
	private static void validate(Object[] array) {
		Validate.notNull(array);
		Validate.isTrue(array.length > 0, "You must specify at least one element.");
	}
	
	private static ItemObject[] toItemObjects(Material[] materials) {
		validate(materials);
		return Arrays.stream(materials).map(material -> new ItemObject().setItem(material)).toArray(ItemObject[]::new);
	}
	
	private void finalize(Advancement advancement, @Nullable Advancement parent) {
		if (parent != null) {
			advancement.makeChild(parent.getId());
		}
		if (autoActivate) {
			advancement.activate(autoReload);
		}
	}
}
